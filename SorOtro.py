# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11BbYy5sNwZRAJ58JkN9OAT6ToNXX_PEx
"""

import numpy as np

def DiagonalDominante(Matriz):

  n = len(Matriz)
  for i in range(n):

    suma = 0
    for j in range(n):

      if i == j:
        continue

      suma += abs(Matriz[i][j])

    if(suma > abs(Matriz[i][i])):
      return False

  return True

def isPositiveDefinite(Matriz):
    # Check if the matrix is symmetric
    if not np.allclose(Matriz, Matriz.T):
        return False

    # Check if all eigenvalues are positive
    eigenvalues = np.linalg.eigvals(Matriz)
    if np.all(eigenvalues > 0):
        return True
    else:
        return False



def Calcular_Tj(matriz):
  n = len(matriz)
  Tj = np.zeros((n,n))
  for i in range(n):
    Aii=matriz[i][i]
    for j in range(n):
      if i != j:
        Tj[i][j] = -(matriz[i][j]/Aii)

  return Tj

def calcularW(Tj):
  eig_vals = np.linalg.eigvals(Tj)
  max_val = np.max(eig_vals)
  w = 2/(1+np.sqrt(1-max_val**2))
  return w

def SOR(MatrizA, MatrizB, w):
    n = len(MatrizA)
    tolerancia = 1e-6
    x = np.zeros(n)
    error = float('inf')

    while error > tolerancia:
        x_antiguo = np.copy(x)
        for i in range(n):
            suma = 0
            for j in range(n):
                if i != j:
                    suma += MatrizA[i][j] * x[j]

            x[i] = (w * ((MatrizB[i, 0] - suma) / MatrizA[i][i])) + (1 - w) * x_antiguo[i]

        error = np.linalg.norm(x - x_antiguo)

    return x

matrizPrueba = np.array([[10, 5, 0,0], [5, 10, -4,0], [0, -4, 8,-1], [0, 0, -1,5]])
MatrizB = np.array([[6], [25], [-11],[-11]])

# matrizPrueba = np.array([[3, -2, 1], [3, 6, 2], [3, 3, 7]])
# MatrizB = np.array([[1], [0], [4]])

if DiagonalDominante(matrizPrueba):
    print("La matriz A es diagonalmente dominante.")
else:
    print("La matriz A no es diagonalmente dominante.")

if isPositiveDefinite(matrizPrueba):
    print("La matriz es positiva definida.")
else:
    print("La matriz no es positiva definida.")


w = calcularW(Calcular_Tj(matrizPrueba))
solucion = SOR(matrizPrueba, MatrizB, w)

print("Soluci√≥n utilizando SOR:")
print(solucion)